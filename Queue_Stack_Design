//Queue data structure:

  - This structure will start looking something like a line that you can only cut into at the front or at the end.
  - Within the queue we need a few methods to manipulate what's known as a queue data structure
      +.pop_front will should pop the front off
      +.pop_end will pop the end off of the queue
      +.add_front should add another layer to the front of the data structure. (keep in mind we may not be able to use .add)
      +.add_end should add a value to the end of the line, kind of like getting in line at the subway for a 1am ham sandwich.
      +.read_value should read the value of the first oe the last value in the queue and return it to the user.
 
- With these in mind we will always want to know what data is first and in the back of the line because those should be 
    our only manipulatable data.
      
//Linked list data structure:

  -This structure looks like a tower, straight up and you can only manipulate the top.
  -Within this structure we will need to create some methods to manipulate what will be known as a linked list structure.
      +.pop only pops the the very top of the linked list off
      +.add will add some value of data to the top of the stack. (keep in mind we may not be able to use .add)
      +.read_value will work again here as we need to see what the top of the stack looks like before deciding what we want to do with it.
- At all times, we will want to know what is at the top of our stack. If we have a stack with embedded stacks, which is what I believe we 
- we can see this used almost everyday in what we call "folders". It would be nice to keep track of what "stacks" we have accessed and how to get back by going one step at a time in the opposite direction.
